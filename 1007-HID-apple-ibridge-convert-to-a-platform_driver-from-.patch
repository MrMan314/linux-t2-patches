From 8205b29335497166e4df74e07995fb62a2c953d9 Mon Sep 17 00:00:00 2001
From: Kerem Karabay <kekrby@gmail.com>
Date: Tue, 7 Feb 2023 21:32:33 +0530
Subject: [PATCH 3/5] HID: apple-ibridge: convert to a platform_driver from an
 acpi_driver and rely on hid-core's parsing

This patch addresses the following issues raised by upstream maintainers:

1. https://lore.kernel.org/lkml/CAHp75Vd13nobdyiUbYoTbeoqG4rGP-Vfswcuuy3oYjXgTXzNSw@mail.gmail.com/
2. https://lore.kernel.org/lkml/20210228150239.00007d34@Huawei.com/
3. https://lore.kernel.org/lkml/CAO-hwJLXAHvjYKxu8pyqMPCNgMrN-H8bGWudVqCaRFnWODHPVQ@mail.gmail.com/
---
 drivers/hid/Kconfig         |   3 +-
 drivers/hid/apple-ibridge.c | 144 +++++++++---------------------------
 2 files changed, 37 insertions(+), 110 deletions(-)

diff --git a/drivers/hid/Kconfig b/drivers/hid/Kconfig
index adf341d33..9066e0fe4 100644
--- a/drivers/hid/Kconfig
+++ b/drivers/hid/Kconfig
@@ -132,9 +132,8 @@ config HID_APPLE
 
 config HID_APPLE_IBRIDGE
 	tristate "Apple iBridge"
-	depends on ACPI
 	depends on USB_HID
-	depends on X86 || COMPILE_TEST
+	depends on (X86 && ACPI) || COMPILE_TEST
 	imply HID_APPLE_TOUCHBAR
 	imply HID_SENSOR_HUB
 	imply HID_SENSOR_ALS
diff --git a/drivers/hid/apple-ibridge.c b/drivers/hid/apple-ibridge.c
index 7ad6fa6c3..997db0837 100644
--- a/drivers/hid/apple-ibridge.c
+++ b/drivers/hid/apple-ibridge.c
@@ -40,6 +40,7 @@
  * iBridge when suspending and resuming.
  */
 
+#include <linux/platform_device.h>
 #include <linux/acpi.h>
 #include <linux/device.h>
 #include <linux/hid.h>
@@ -54,8 +55,6 @@
 
 #define APPLEIB_BASIC_CONFIG	1
 
-#define	LOG_DEV(ib_dev)		(&(ib_dev)->acpi_dev->dev)
-
 static struct hid_device_id appleib_sub_hid_ids[] = {
 	{ HID_USB_DEVICE(USB_VENDOR_ID_LINUX_FOUNDATION,
 			 USB_DEVICE_ID_IBRIDGE_TB) },
@@ -78,8 +77,7 @@ static struct {
 };
 
 struct appleib_device {
-	struct acpi_device	*acpi_dev;
-	acpi_handle		asoc_socw;
+	acpi_handle asoc_socw;
 };
 
 struct appleib_hid_dev_info {
@@ -163,7 +161,7 @@ static int appleib_forward_int_op(struct hid_device *hdev,
 {
 	struct appleib_hid_dev_info *hdev_info = hid_get_drvdata(hdev);
 	struct hid_device *sub_hdev;
-	int rc = 0;
+	int rc;
 	int i;
 
 	for (i = 0; i < ARRAY_SIZE(hdev_info->sub_hdevs); i++) {
@@ -171,13 +169,11 @@ static int appleib_forward_int_op(struct hid_device *hdev,
 		if (sub_hdev->driver) {
 			rc = forward(sub_hdev->driver, sub_hdev, args);
 			if (rc)
-				break;
+				return rc;
 		}
-
-		break;
 	}
 
-	return rc;
+	return 0;
 }
 
 static int appleib_hid_suspend_fwd(struct hid_driver *drv,
@@ -332,43 +328,6 @@ static struct hid_ll_driver appleib_ll_driver = {
 	.output_report = appleib_ll_output_report,
 };
 
-static __u8 *appleib_find_collection(__u8 *start, __u8 *end,
-				     unsigned int *usage)
-{
-	struct hid_item item;
-	int depth = 0;
-
-	*usage = 0;
-
-	while ((start = hid_fetch_item(start, end, &item)) != NULL) {
-		if (item.type == HID_ITEM_TYPE_MAIN) {
-			switch (item.tag) {
-			case HID_MAIN_ITEM_TAG_BEGIN_COLLECTION:
-				depth++;
-				break;
-
-			case HID_MAIN_ITEM_TAG_END_COLLECTION:
-				depth--;
-				if (depth <= 0)
-					return start;
-				break;
-			}
-		} else if (item.type == HID_ITEM_TYPE_GLOBAL &&
-			   item.tag == HID_GLOBAL_ITEM_TAG_USAGE_PAGE &&
-			   depth == 0) {
-			*usage = (*usage & 0x0000FFFF) |
-				 ((hid_item_udata(&item) & 0xFFFF) << 16);
-		} else if (item.type == HID_ITEM_TYPE_LOCAL &&
-			   item.tag == HID_LOCAL_ITEM_TAG_USAGE &&
-			   depth == 0) {
-			*usage = (*usage & 0xFFFF0000) |
-				 (hid_item_udata(&item) & 0xFFFF);
-		}
-	}
-
-	return end;
-}
-
 static struct hid_device_id *appleib_find_dev_id_for_usage(unsigned int usage)
 {
 	int i;
@@ -383,7 +342,7 @@ static struct hid_device_id *appleib_find_dev_id_for_usage(unsigned int usage)
 
 static struct hid_device *
 appleib_add_sub_dev(struct appleib_hid_dev_info *hdev_info,
-		    struct hid_device_id *dev_id, u8 *rdesc, size_t rsize)
+		    struct hid_device_id *dev_id)
 {
 	struct hid_device *sub_hdev;
 	int rc;
@@ -408,12 +367,6 @@ appleib_add_sub_dev(struct appleib_hid_dev_info *hdev_info,
 
 	sub_hdev->driver_data = hdev_info;
 
-	rc = hid_parse_report(sub_hdev, rdesc, rsize);
-	if (rc) {
-		hid_destroy_device(sub_hdev);
-		return ERR_PTR(rc);
-	}
-
 	rc = hid_add_device(sub_hdev);
 	if (rc) {
 		hid_destroy_device(sub_hdev);
@@ -426,9 +379,6 @@ appleib_add_sub_dev(struct appleib_hid_dev_info *hdev_info,
 static struct appleib_hid_dev_info *appleib_add_device(struct hid_device *hdev)
 {
 	struct appleib_hid_dev_info *hdev_info;
-	__u8 *start = hdev->dev_rdesc;
-	__u8 *end = start + hdev->dev_rsize;
-	__u8 *pos;
 	struct hid_device_id *dev_id;
 	unsigned int usage;
 	int i;
@@ -439,33 +389,22 @@ static struct appleib_hid_dev_info *appleib_add_device(struct hid_device *hdev)
 
 	hdev_info->hdev = hdev;
 
-	for (i = 0; ; ) {
-		pos = appleib_find_collection(start, end, &usage);
-
+	for (i = 0; i < hdev->maxcollection; i++) {
+		usage = hdev->collection[i].usage;
 		dev_id = appleib_find_dev_id_for_usage(usage);
+
 		if (!dev_id) {
 			hid_warn(hdev, "Unknown collection encountered with usage %x\n",
 				 usage);
-
-		} else if (i >= ARRAY_SIZE(hdev_info->sub_hdevs)) {
-			hid_warn(hdev, "Too many collections encountered - ignoring for usage %x\n",
-				 usage);
 		} else {
-			hdev_info->sub_hdevs[i] =
-				appleib_add_sub_dev(hdev_info, dev_id, start,
-						    pos - start);
+			hdev_info->sub_hdevs[i] = appleib_add_sub_dev(hdev_info, dev_id);
+
 			if (IS_ERR(hdev_info->sub_hdevs[i])) {
 				while (i-- > 0)
 					hid_destroy_device(hdev_info->sub_hdevs[i]);
 				return (void *)hdev_info->sub_hdevs[i];
 			}
-
-			i++;
 		}
-
-		start = pos;
-		if (start >= end)
-			break;
 	}
 
 	return hdev_info;
@@ -561,21 +500,19 @@ static struct hid_driver appleib_hid_driver = {
 #endif
 };
 
-static struct appleib_device *appleib_alloc_device(struct acpi_device *acpi_dev)
+static struct appleib_device *appleib_alloc_device(struct platform_device *platform_dev)
 {
 	struct appleib_device *ib_dev;
 	acpi_status sts;
 
-	ib_dev = devm_kzalloc(&acpi_dev->dev, sizeof(*ib_dev), GFP_KERNEL);
+	ib_dev = devm_kzalloc(&platform_dev->dev, sizeof(*ib_dev), GFP_KERNEL);
 	if (!ib_dev)
 		return ERR_PTR(-ENOMEM);
 
-	ib_dev->acpi_dev = acpi_dev;
-
 	/* get iBridge acpi power control method for suspend/resume */
-	sts = acpi_get_handle(acpi_dev->handle, "SOCW", &ib_dev->asoc_socw);
+	sts = acpi_get_handle(ACPI_HANDLE(&platform_dev->dev), "SOCW", &ib_dev->asoc_socw);
 	if (ACPI_FAILURE(sts)) {
-		dev_err(LOG_DEV(ib_dev),
+		dev_err(&platform_dev->dev,
 			"Error getting handle for ASOC.SOCW method: %s\n",
 			acpi_format_exception(sts));
 		return ERR_PTR(-ENXIO);
@@ -584,76 +521,70 @@ static struct appleib_device *appleib_alloc_device(struct acpi_device *acpi_dev)
 	/* ensure iBridge is powered on */
 	sts = acpi_execute_simple_method(ib_dev->asoc_socw, NULL, 1);
 	if (ACPI_FAILURE(sts))
-		dev_warn(LOG_DEV(ib_dev), "SOCW(1) failed: %s\n",
+		dev_warn(&platform_dev->dev, "SOCW(1) failed: %s\n",
 			 acpi_format_exception(sts));
 
 	return ib_dev;
 }
 
-static int appleib_probe(struct acpi_device *acpi)
+static int appleib_probe(struct platform_device *platform_dev)
 {
 	struct appleib_device *ib_dev;
 	int ret;
 
-	ib_dev = appleib_alloc_device(acpi);
+	ib_dev = appleib_alloc_device(platform_dev);
 	if (IS_ERR(ib_dev))
 		return PTR_ERR(ib_dev);
 
 	ret = hid_register_driver(&appleib_hid_driver);
 	if (ret) {
-		dev_err(LOG_DEV(ib_dev), "Error registering hid driver: %d\n",
+		dev_err(&platform_dev->dev, "Error registering hid driver: %d\n",
 			ret);
 		return ret;
 	}
 
-	acpi->driver_data = ib_dev;
+	platform_set_drvdata(platform_dev, ib_dev);
 
 	return 0;
 }
 
-static int appleib_remove(struct acpi_device *acpi)
+static int appleib_remove(struct platform_device *platform_dev)
 {
 	hid_unregister_driver(&appleib_hid_driver);
 
 	return 0;
 }
 
-static int appleib_suspend(struct device *dev)
+static int appleib_suspend(struct platform_device *platform_dev, pm_message_t message)
 {
 	struct appleib_device *ib_dev;
 	int rc;
 
-	ib_dev = acpi_driver_data(to_acpi_device(dev));
+	ib_dev = platform_get_drvdata(platform_dev);
 
 	rc = acpi_execute_simple_method(ib_dev->asoc_socw, NULL, 0);
 	if (ACPI_FAILURE(rc))
-		dev_warn(dev, "SOCW(0) failed: %s\n",
+		dev_warn(&platform_dev->dev, "SOCW(0) failed: %s\n",
 			 acpi_format_exception(rc));
 
 	return 0;
 }
 
-static int appleib_resume(struct device *dev)
+static int appleib_resume(struct platform_device *platform_dev)
 {
 	struct appleib_device *ib_dev;
 	int rc;
 
-	ib_dev = acpi_driver_data(to_acpi_device(dev));
+	ib_dev = platform_get_drvdata(platform_dev);
 
 	rc = acpi_execute_simple_method(ib_dev->asoc_socw, NULL, 1);
 	if (ACPI_FAILURE(rc))
-		dev_warn(dev, "SOCW(1) failed: %s\n",
+		dev_warn(&platform_dev->dev, "SOCW(1) failed: %s\n",
 			 acpi_format_exception(rc));
 
 	return 0;
 }
 
-static const struct dev_pm_ops appleib_pm = {
-	.suspend = appleib_suspend,
-	.resume = appleib_resume,
-	.restore = appleib_resume,
-};
-
 static const struct acpi_device_id appleib_acpi_match[] = {
 	{ "APP7777", 0 },
 	{ },
@@ -661,21 +592,18 @@ static const struct acpi_device_id appleib_acpi_match[] = {
 
 MODULE_DEVICE_TABLE(acpi, appleib_acpi_match);
 
-static struct acpi_driver appleib_driver = {
-	.name		= "apple-ibridge",
-	.class		= "apple_ibridge",
-	.owner		= THIS_MODULE,
-	.ids		= appleib_acpi_match,
-	.ops		= {
-		.add		= appleib_probe,
-		.remove		= appleib_remove,
-	},
-	.drv		= {
-		.pm		= &appleib_pm,
+static struct platform_driver appleib_driver = {
+	.probe		= appleib_probe,
+	.remove		= appleib_remove,
+	.suspend	= appleib_suspend,
+	.resume		= appleib_resume,
+	.driver 	= {
+		.name 		  = "apple-ibridge",
+		.acpi_match_table = appleib_acpi_match,
 	},
 };
 
-module_acpi_driver(appleib_driver)
+module_platform_driver(appleib_driver);
 
 MODULE_AUTHOR("Ronald Tschal√§r");
 MODULE_DESCRIPTION("Apple iBridge driver");
-- 
2.37.2

